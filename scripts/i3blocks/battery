#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re
import subprocess
import sys


# Battery status strings reported by acpi
_STATUS_UNKNOWN     = 'Unknown'
_STATUS_CHARGING    = 'Charging'
_STATUS_DISCHARGING = 'Discharging'

# Font Awesome icons used to display battery status
_ICON_PLUG     = ''
_ICON_BATTERY0 = ''
_ICON_BATTERY1 = ''
_ICON_BATTERY2 = ''
_ICON_BATTERY3 = ''
_ICON_BATTERY4 = ''

# Gruvbox colors used to display battery status
_COLOR_NORMAL   = '#928374'
_COLOR_CHARGING = '#458588'
_COLOR_WARNING  = '#cc241d'


def _get_icon_and_color(status, percent):
  """ Returns an icon and color for the current battery status.
  Args:
    status: An acpi string representing the battery status.
    percent: An integer representing the battery level [0,100].
  Returns:
    A tuple whose first element is a UTF-8 font icon and whose second element
    is a hex color string of the form '#RRGGBB.'
  """

  # ACPI incorrectly reports Unknown status when battery is full.
  if status == _STATUS_CHARGING or status == _STATUS_UNKNOWN:
      return (_ICON_PLUG, _COLOR_CHARGING)
  elif percent < 13:
      return (_ICON_BATTERY0, _COLOR_WARNING)
  elif percent < 38:
      return (_ICON_BATTERY1, _COLOR_NORMAL)
  elif percent < 63:
      return (_ICON_BATTERY2, _COLOR_NORMAL)
  elif percent < 88:
      return (_ICON_BATTERY3, _COLOR_NORMAL)
  else:
      return (_ICON_BATTERY4, _COLOR_NORMAL)


def main(argv):
  battery_info = subprocess.check_output(['acpi', '-b'])
  if not battery_info:
    return

  # TODO: Handle more than one battery.
  battery_info = battery_info.split('\n')
  battery_info = battery_info[0]

  match = re.search('Battery [0-9]: ([A-Za-z]*), ([0-9]+)%', battery_info)
  status = match.group(1)
  percent = max(0, min(100, int(match.group(2))))

  icon, color = _get_icon_and_color(status, percent)
  display_text = "{} {}%".format(icon, percent)

  print(display_text)
  print(display_text)
  print(color)


if __name__ == "__main__":
    main(sys.argv)
